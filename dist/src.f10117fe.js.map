{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;uBAQA;ACRA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADUA,IAAA,IAAA;ACRA,ADQA,ICRM,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;AAAE,ADQxB,ECRwB,IAAI,EAAE,IDQ9B,ICRsB;AAAkB,ADStC,ECTsC,GAAG,EAAE,IDS3C,IAAA,CAAoB,IAApB,EAAmC;ACTf,ADSA,CCTT,CAAb,EAEA,KDOsB,IAAA,GAAA,IAAA;AAAoB;ACN1C,IAAI,CAAC,EAAL,CAAQ,QAAR,EAAkB,YAAA,CAAS,CAA3B;AACA,ADOE,EAAA,ECPE,CAAC,CDOH,CCPF,ADOE,CCPM,QAAR,ADOE,CAAA,CCPgB,EDOhB,GAAA,OCPgB,CAAS,CAA3B,CDOM,QAAJ,EAAoB;ACLtB,ADMI,ICNA,CAAC,EAAL,CAAQ,GDMG,KAAK,GCNhB,CDMW,CCNU,ADMA,QAAV,CAAP,GCNiB,CAAS,CAA9B;AACA,ADMG,GAFD,CAHF,CAOE,ECRK,CAAC,GAAR,CAAY,IAAZ;AAEA,ADOE,OCPK,CAAC,GAAR,CAAY,IAAI,CAAC,GAAL,CAAS,MAAT,CAAZ;AACA,ADOE,OCPK,CAAC,GAAR,CAAY,IAAI,CAAC,GAAL,CAAS,KAAT,CAAZ,GACA;ADOE;AACA;;;AACA,EAAA,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC;AACtC;AACA,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,KAA0B,EAA3C;AACA,IAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,SAAK,MAAL,CAAY,SAAZ,IAAyB,QAAzB;AACD,GALD;;AAOF,SAAA,IAAA;AAnBA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["interface UserProps {\n  name?: string;\n  age?: number;\n}\n// const user = new User({ name: 'myname', age: 20 });\n// user.set({ name: 'newname', age: 99999 })\n\ntype Callback = () => void\n// no types and no return value\n\nexport class User {\n  constructor(private data: UserProps) { }\n\n  get(propName: string): number | string {\n    return this.data[propName];\n  }\n\n  // set(update: UserProps): void {\n  //   Object.assign(this.data, update);\n  //   // overwrite all values in this.data\n  // }\n  // Use type alias to represent () => {}\n  on(eventName: string, callback: Callback): void {\n    // this.events[eventName] // return either Callback[] or undefined\n    const handlers = this.events[eventName] || [];\n    handlers.push(callback);\n    this.events[eventName] = handlers;\n  }\n\n}","import { User } from './models/User';\n\nconst user = new User({ name: 'myname', age: 20 });\n\n// insert first function change\nuser.on('change', () => { });\nuser.on('change', () => { });\n\nuser.on('randomzie', () => { });\nconsole.log(user);\n\nconsole.log(user.get('name'));\nconsole.log(user.get('age'));\n// console.log(\"singapore\")"]}